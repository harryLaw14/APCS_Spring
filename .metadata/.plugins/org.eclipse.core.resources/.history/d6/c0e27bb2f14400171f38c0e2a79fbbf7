package textExcel;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.Scanner;

public class Spreadsheet implements Grid {
	
	private int rows = 20;
	private int columns = 12;
	static Cell [][] sheet = new Cell [21][13];
	
	//makes a new spreadsheet
	public Spreadsheet() {
		for(int i = 1; i < 21; i++) {
			for(int j = 1; j < 13; j++) {
				sheet [i][j] = new EmptyCell();
			}
		}
	}
	

	public String processCommand(String pointer) {
		int row, column;
		String feedback = "";
		if (pointer.equals("quit")) {//Quits the program
			feedback = "quit";
		}else {
			if(pointer.equals("")) {
				feedback = "";
			}else {
				if (pointer.length() <= 3 && pointer.length() != 0) {
					column = Character.getNumericValue(pointer.charAt(0)) - 9;
					row = Integer.valueOf((pointer.substring(1))) ;
					
					feedback = sheet[row][column].fullCellText();
				}else {
					if (pointer.contains("=")) {//valuecell
						String [] splitter = pointer.split(" ", 3);
						SpreadsheetLocation place = new SpreadsheetLocation(splitter[0]);
						if (isNumeric(splitter[2])) {					
								ValueCell valueCell = new ValueCell(splitter[2]);
								sheet[place.getRow() + 1][place.getCol() + 1] = valueCell;	
						}else {
							if (splitter[2].contains("%")) {//percentcell
								PercentCell percentCell = new PercentCell(splitter[2]);
								sheet[place.getRow() + 1][place.getCol() + 1] = percentCell;	
							}else {
								if(!splitter[2].substring(0,1).equals("\"") && (pointer.contains("+") || pointer.contains("-") || pointer.contains("*") || pointer.contains("/"))) {//formulacell
									FormulaCell formulaCell = new FormulaCell(splitter[2]);
									sheet[place.getRow() + 1][place.getCol() + 1] = formulaCell;
								}else {
									if(splitter[2].charAt(0) == '\"') {
										String [] quotes = splitter[2].split("\"", 3);
										TextCell cell = new TextCell(quotes[1]);
										sheet[place.getRow() + 1][place.getCol() + 1] = cell;
									}else {
										if (pointer.contains("(") && isNumeric(splitter[2].substring(splitter[2].indexOf('(')+1, splitter[2].indexOf(')')).trim())) {
											String value = splitter[2].substring(splitter[2].indexOf('(')+1, splitter[2].indexOf(')')).trim();
											ValueCell valueCell = new ValueCell(value);
											sheet[place.getRow() + 1][place.getCol() + 1] = valueCell;	
										}else {
											String [] quotes = splitter[2].split("\"", 3);
											TextCell cell = new TextCell(quotes[1]);
											sheet[place.getRow() + 1][place.getCol() + 1] = cell;
										}
									}
								}
										
							}
						}
						feedback = this.getGridText();
					}
					if(pointer.toLowerCase().equals("clear")) {//clearing
						Cell [][] clearer = new Cell[21][13];
						for(int i = 1; i < 21; i++) {
						for(int j = 1; j < 13; j++) {
							clearer [i][j] = new EmptyCell();
						}
						}
						sheet = clearer;
						feedback = this.getGridText();
					}
					if(pointer.toLowerCase().contains("clear ")) {
						String [] splitterint2 = pointer.split(" ", 2);
			
						SpreadsheetLocation location = new SpreadsheetLocation(splitterint2[1]);
						sheet[location.getRow() + 1][location.getCol() + 1] = new EmptyCell();
						feedback = this.getGridText();	
					}
					if(pointer.substring(0,4).equals("save")){
						feedback = this.writer(pointer.substring(5));
					}
					if(pointer.substring(0,4).equals("open")){
						feedback = this.readFromFile(pointer.substring(5));
					}
				}	
			}
		}
		
		return feedback;
	}
	
	//Saves a spreadsheet and its contents to a file
	private String writer(String fileName){ 
		
		PrintStream output;

		try {
		output = new PrintStream(new File(fileName));
		}

		catch (FileNotFoundException e) {
			return "File not found: " + fileName;
		}

		String lineup;
		char col = 'A';
		String cellName;
		String cellType;
		for (int z = 1; z < 13; z++) {
			for (int row = 1; row < 21; row++) {
				cellName = "" + z + row;
				if(!sheet[row][z].fullCellText().equals("")) {
					if(sheet[row][z].abbreviatedCellText().contains("%")) {
						cellType = "PercentCell";
					}
					else {
						if(sheet[row][z].fullCellText().contains("\"")) {
							cellType = "TextCell";
						}
						else {
							if(isNumeric(sheet[row][z].fullCellText())) {
								cellType = "ValueCell";
							}
							else {
								
								cellType = "FormulaCell";
							}
						}
					}
					lineup = cellName + "," + cellType + "," + sheet[row][z].fullCellText();
					output.println(lineup);
				}
			}
			z++;
		}
		
		output.close();

		return this.getGridText();

		}

	//Reads an input file, and creates a spreadsheet from the information in the file
	private String readFromFile(String filename){

		Scanner inputFile;

		try {

		inputFile = new Scanner(new File(filename));

		}

		catch (FileNotFoundException e) {

		return "File not found: " + filename;

		}
		String line;
		String [] splitLine;
		while(inputFile.hasNextLine()) {
			line = inputFile.nextLine();
			splitLine = line.split(",", 3);
			SpreadsheetLocation location = new SpreadsheetLocation(splitLine[0]);
			if(splitLine[1].equals("TextCell")) {
				String [] contentsWithoutQuotes = splitLine[2].split("\"", 3);
				TextCell cell = new TextCell(contentsWithoutQuotes[1]);
				sheet[location.getRow() + 1][location.getCol() + 1] = cell;	
			}
			else {
				if(splitLine[1].equals("PercentCell")) {
					PercentCell percentCell = new PercentCell("" + Double.parseDouble(splitLine[2])*100);
					sheet[location.getRow() + 1][location.getCol() + 1] = percentCell;	
				}
				else {
					if(splitLine[1].equals("FormulaCell")) {
						FormulaCell formulaCell = new FormulaCell(splitLine[2]);
						sheet[location.getRow() + 1][location.getCol() + 1] = formulaCell;	
					}
					else {
						ValueCell valueCell = new ValueCell(splitLine[2]);
						sheet[location.getRow() + 1][location.getCol() + 1] = valueCell;	
					}
				}
			}
			
			
		}

		inputFile.close();
		
		return this.getGridText();

		}
	
	//Tests if a string is numeric (only containing numbers, a '.', or a '-')
	public boolean isNumeric(String input) {
		String testString;
		boolean returnValue = true;
		if(input.charAt(0) == '-') {			
			testString = input.substring(1);			
		}
		else {
			testString = input;	
		}
	
		for(int i = 0; i < testString.length(); i ++) {
			if(testString.charAt(i) != '.') {
				if(!Character.isDigit(testString.charAt(i))) {
					return !returnValue;
				}
			}
		}
			return returnValue;
	}

	//Returns the number of rows in the spreadsheet
	public int getRows() {
		return rows;
	}

	//Returns the number of columns in the spreadsheet
	public int getCols() {
		return columns;
	}

	//Returns the cell at a given location in the spreadsheet
	public Cell getCell(Location loc) {
		return sheet[loc.getRow() + 1][loc.getCol() + 1];
	}

	//Returns the entire spreadsheet
	public String getGridText() {
		String grid = "";
		char colCount = 'A';
		
		for(int row = 0; row < 21; row++) {
			for(int col = 0; col < 13; col++) {
				if(row == 0) {
					if(col == 0) {
						grid += "   |";
					}
					else {
					grid += "" + colCount + "         |";
					colCount++;	
					}
				}
				else {
					if (col == 0) {
						if(row < 10) {
							grid += "" + row + "  |";
						}
						else {
							grid += "" + row + " |";
						}
						
					}
					else {
						String test = sheet[row][col].abbreviatedCellText();
						if(test.equals("")){
							grid += "          |";
						}
						else{
							grid += test + "|";
						}
					}
				
			}
		}
			
		grid += "\n";
	}
	return grid;
	}
}
